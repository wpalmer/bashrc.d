function bashrc.d_remote_remote(){
	local remote="$1"; shift;

	if [ $# -gt 0 ]; then
		ssh "$remote" "$@"
	else
		ssh -t "$remote" screen -A -x -RR
	fi
}

function bashrc.d_remote_sudo(){
	local remote="$1"; shift;

	if [ $# -gt 0 ]; then
		bashrc.d_remote_remote "$remote" -t sudo -i "$@"
	else
		bashrc.d_remote_sudo "$remote" screen -A -x -RR
	fi
}

function bashrc.d_remote_alias(){
	local alias="$1"; shift
	local host
	if [ $# -lt 1 ]; then
		host="$alias"
	else
		host="$1"
	fi

	eval function "$alias(){ bashrc.d_remote_remote $host \"\$@\"; }"
}

function bashrc.d_remote_sudo-alias(){
	local alias="$1"; shift
	local host
	if [ $# -lt 1 ]; then
		host="$alias"
	else
		host="$1"
	fi

	eval function "$alias(){ bashrc.d_remote_sudo $host \"\$@\"; }"
}

# prepare command to pass safely across a channel which does not split arguments
# Note that this whole thing is ver pedentic and almost certainly unnecessary.
# This can be emulated with a simple $(printf '%q ' "$@"). However, this carries
# an implicit assumption that the meaning of '%q' by bash on one side is
# compatible with whatever shell is on the remote side
bashrc.d_remote_remotify(){
	local base64=
	local arguments=
	if [ $# -gt 0 ]; then
		arguments="$(printf '%s\0' "$@"|base64 -w 0)"
		base64="$(echo "$(remotify <<COMMAND
			remotify_APPLY(){
				local command=()
				local argument
				while read -r -d \$'\0' argument; do
					command[\${#command[@]}]="\$argument"
				done < <(echo -n "\$1"|base64 -d)
				"\${command[@]}"
			}
			remotify_APPLY '$arguments'
COMMAND
		)"|gzip -c|base64 -w 0)"
	else
		base64="$(gzip -c|base64 -w 0)"
	fi
	echo "bash -c 'eval \"\$(echo -n '$base64'|base64 -d|gzip -d -c)\"'"
}

remotify(){ bashrc.d_remote_remotify "$@"; }
