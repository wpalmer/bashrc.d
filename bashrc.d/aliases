function rebash(){
	unset BASHRC_ONCE
	. ~/.bashrc
}

alias ll='ls -lA'
function cdd(){
	if [ -d "$1" -o ! -e "$1" ] || [ ! -d "$(dirname "$1")" ]; then
		cd "$@"
		return $?
	fi
	cd "$(dirname "$1")"
	return $?
}
function dirs(){
	[ $# -eq 0 ] && builtin dirs -v | tac
	[ $# -gt 0 ] && builtin dirs "$@"
}
function mcd(){
    local args=("$@")
    mkdir "${args[@]}" && cd "${args[${#args[@]}-1]}"
}
function up(){
	if [ $# -lt 1 ]; then
		cd ..
		return 0
	fi

	local oldIFS="$IFS"
	IFS=/
	local dirs=(`pwd`)
	IFS="$oldIFS"
	while [ ${#dirs[@]} -gt 0 ]; do
		oldIFS="$IFS"
		IFS=/
		local part="${dirs[${#dirs[@]}-1]}"
		local dir="${dirs[*]}"
		IFS="$oldIFS"

		unset dirs[${#dirs[@]}-1]
		if [ "$part" = "$1" ]; then
			cd "$dir"
			return 0
		fi
	done

	echo "directory '$1' is not an ancestor of the current working directory" >&2
	return 1
}
function ..(){
	up "$@"
}
function c(){
	column -nts$'\t'
}
function screen(){
	if [ $# -eq 0 ]; then
		command screen -A -x -RR
	else
		command screen "$@"
	fi
}

if which gls >/dev/null 2>&1; then
	function ls(){
		command gls --color=auto "$@"
	}
else
	function ls(){
		command ls --color=auto "$@"
	}
fi

gcommands=(
	base64
	basename
	dirname
	readlink
	cat
	tac
	sed
	tail
	tee
	sort
	split
	stat
	nice
	cp
	mv
	rm
	ln
	rmdir
	touch
	date
	cut
	df
	'['
	seq
	sleep
)

for command in "${gcommands[@]}"; do
	if which g$command >/dev/null 2>&1; then
		eval "function $command(){ command g$command \"\$@\"; }"
	fi
done
